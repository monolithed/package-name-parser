/*
 @see https://docs.npmjs.com/misc/scope
 @see https://docs.npmjs.com/files/package.json
*/

{
    const INVALID_LEADING_CHARACTERS = /^[._]/;
    const MAX_SIZE = 214;
}

/*
 * --------------------
 * Package
 * --------------------
*/

Main = input:Package {
    const {length} = text();

    if (length > MAX_SIZE) {
        return error(`The name must be less than or equal to ${MAX_SIZE} characters`);
    }

    return input;
};

Package = PackageWithVersion / PackageWithScope / PackageName;

/*
 * --------------------
 * Name
 * --------------------
*/

Id = id:$[a-z0-9_.-]+ {
    const position = id.search(INVALID_LEADING_CHARACTERS);

    if (position !== -1) {
        const {start} = location();

        return error(`Unexpected character "${id[position]}" at position ${start.column}.`);
    }

    return id;
};

PackageName = name:Id {
    return {name};
};

/*
 * --------------------
 * Scope
 * --------------------
*/

PackageWithScope = "@" scope:Id "/" name:Id {
    return {scope, name};
};

/*
 * --------------------
 * Version
 * --------------------
*/

Version = specifier:VersionSpecifier ? version:(SemverVersion / NpmVersion) {
    if (specifier) {
        version.original = specifier + version.original;
    }

    return {specifier, ...version};
}

PackageWithVersion = name:(PackageWithScope / PackageName) "@" version:Version {
    return {...name, version};
};

/*
 * --------------------
 * Npm version
 * --------------------
*/

WildcardVersion = "*" / "x";
VersionSpecifier = "~" / "^";
OptionalVersion = NumericIdentifier / WildcardVersion;

NpmVersion = basic:$(OptionalVersion ("." OptionalVersion) ? ("." OptionalVersion) ?) {
   return {
           basic,
        original: text()
   };
};

/*
 * --------------------
 * Semantic version
 * --------------------
*/

SemverVersion = FullVersion /
                BuildMetadata /
                PreReleaseVersion /*
                VersionCore*/;

FullVersion = basic:$VersionCore "-" preRelease:$DotSeparatedPreReleaseIdentifiers "+" buildMetadata:$DotSeparatedBuildIdentifiers {
    return {
        basic,
        preRelease,
        buildMetadata,
        original: text()
   };
};

BuildMetadata = basic:$VersionCore "+" buildMetadata:$DotSeparatedBuildIdentifiers {
    return {
        basic,
        buildMetadata,
        original: text()
    };
};

PreReleaseVersion = basic:$VersionCore "-" preRelease:$DotSeparatedPreReleaseIdentifiers {
    return {
        basic,
        preRelease,
        original: text()
    };
};

BasicVersion = basic:$VersionCore {
    return {
        basic,
        original: text()
    };
};

VersionCore = $(majorVersion:NumericIdentifier "." minorVersion:NumericIdentifier "." patchVersion:NumericIdentifier);

DotSeparatedPreReleaseIdentifiers = PreReleaseIdentifier "." DotSeparatedPreReleaseIdentifiers /
                                    PreReleaseIdentifier;

DotSeparatedBuildIdentifiers = BuildIdentifier "." DotSeparatedBuildIdentifiers /
                               BuildIdentifier;

PreReleaseIdentifier = (AlphanumericIdentifier / NumericIdentifier)+;
BuildIdentifier = (AlphanumericIdentifier / Digits)+;

AlphanumericIdentifier = IdentifierCharacters NonDigit IdentifierCharacters /
                         IdentifierCharacters NonDigit /
                         NonDigit IdentifierCharacters /
                         NonDigit;

NumericIdentifier = PositiveDigit Digits /
                    PositiveDigit /
                    "0";

IdentifierCharacters = IdentifierCharacter IdentifierCharacters /
                       IdentifierCharacter;

IdentifierCharacter = Digit /
                      NonDigit;

NonDigit = Letter /
           "-";

Digits = Digit Digits /
         Digit;


Digit = "0" /
        PositiveDigit

PositiveDigit = [1-9]+
Letter = [a-zA-Z]+
